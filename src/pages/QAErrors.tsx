import React, { useState } from 'react'
import Header from '@/components/layout/Header'
import { ErrorList, type QAError } from '@/components/data-display'
import { QASessionLayout } from '@/components/layout/QALayout'
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from '@/components/ui/card'
import { Badge } from '@/components/ui/badge'
import { Button } from '@/components/ui/button'
import { RefreshCw, Filter, Download } from 'lucide-react'
import { FeedbackFormData } from '@/lib/types/user-feedback'

const QAErrors: React.FC = () => {
  // Sample QA errors data - in a real application, this would come from your API
  const [errors] = useState<QAError[]>([
    {
      id: 'error-001',
      type: 'Terminology',
      severity: 'critical',
      message: 'Critical terminology inconsistency detected',
      description: 'The term "software application" should consistently be "application" throughout the document to maintain terminology standards.',
      segmentId: 'seg_001',
      segmentText: 'The software application provides comprehensive user management features.',
      position: { start: 4, end: 24 },
      category: 'Terminology',
      subcategory: 'Inconsistency',
      createdAt: '2024-01-15T10:30:00Z',
      createdBy: 'QA System',
      resolved: false
    },
    {
      id: 'error-002',
      type: 'Grammar',
      severity: 'major',
      message: 'Subject-verb agreement error',
      description: 'The subject "features" requires a plural verb form.',
      segmentId: 'seg_002',
      segmentText: 'The advanced features was implemented to enhance user experience.',
      position: { start: 21, end: 24 },
      category: 'Grammar',
      subcategory: 'Agreement',
      createdAt: '2024-01-15T10:32:00Z',
      createdBy: 'QA System',
      resolved: false
    },
    {
      id: 'error-003',
      type: 'Style',
      severity: 'minor',
      message: 'Passive voice usage',
      description: 'Consider using active voice for better readability.',
      segmentId: 'seg_003',
      segmentText: 'The report was generated by the system automatically.',
      position: { start: 11, end: 26 },
      category: 'Style',
      subcategory: 'Voice',
      createdAt: '2024-01-15T10:35:00Z',
      createdBy: 'QA System',
      resolved: false
    },
    {
      id: 'error-004',
      type: 'Punctuation',
      severity: 'minor',
      message: 'Missing serial comma',
      description: 'Add a comma before the final "and" in a series for clarity.',
      segmentId: 'seg_004',
      segmentText: 'The system supports editing, reviewing and publishing content.',
      position: { start: 35, end: 39 },
      category: 'Punctuation',
      subcategory: 'Serial Comma',
      createdAt: '2024-01-15T10:40:00Z',
      createdBy: 'QA System',
      resolved: false
    },
    {
      id: 'error-005',
      type: 'Consistency',
      severity: 'major',
      message: 'Date format inconsistency',
      description: 'Use consistent date format throughout the document (MM/DD/YYYY recommended).',
      segmentId: 'seg_005',
      segmentText: 'The deadline is 15th January, 2024, but the start date is 01/12/2024.',
      position: { start: 16, end: 33 },
      category: 'Consistency',
      subcategory: 'Format',
      createdAt: '2024-01-15T10:45:00Z',
      createdBy: 'QA System',
      resolved: true,
      resolvedAt: '2024-01-15T11:00:00Z',
      resolvedBy: 'reviewer@example.com',
      notes: 'Fixed to use MM/DD/YYYY format consistently.'
    },
    {
      id: 'error-006',
      type: 'Terminology',
      severity: 'info',
      message: 'Technical term definition suggestion',
      description: 'Consider defining "API" on first use for non-technical readers.',
      segmentId: 'seg_006',
      segmentText: 'The API allows third-party integrations with our platform.',
      position: { start: 4, end: 7 },
      category: 'Terminology',
      subcategory: 'Definition',
      createdAt: '2024-01-15T10:50:00Z',
      createdBy: 'QA System',
      resolved: false
    }
  ])

  const [resolvedErrors, setResolvedErrors] = useState<Set<string>>(new Set())

  const handleErrorClick = (error: QAError) => {
    console.log('Error clicked:', error)
    // In a real application, you might navigate to a detailed view
    // or highlight the error in the document
  }

  const handleErrorResolve = (errorId: string) => {
    setResolvedErrors(prev => new Set([...prev, errorId]))
    console.log('Error resolved:', errorId)
    // In a real application, you would update the backend
  }

  const handleFeedbackSubmit = async (errorId: string, feedback: FeedbackFormData) => {
    try {
      console.log('Feedback submitted for error:', errorId, feedback)
      // In a real application, you would call your feedback service
      // await feedbackService.submitFeedback({
      //   target_type: FeedbackTargetType.ERROR_CATEGORIZATION,
      //   target_id: errorId,
      //   ...feedback
      // })
      
      // Show success message
      alert(`Feedback submitted for error ${errorId}!\nType: ${feedback.feedback_type}\nRating: ${feedback.rating || 'None'}\nComment: ${feedback.comment || 'None'}`)
    } catch (error) {
      console.error('Error submitting feedback:', error)
      alert('Error submitting feedback. Please try again.')
    }
  }

  // Calculate error statistics
  const errorStats = {
    total: errors.length,
    resolved: errors.filter(e => e.resolved || resolvedErrors.has(e.id)).length,
    bySeverity: errors.reduce((acc, error) => {
      acc[error.severity] = (acc[error.severity] || 0) + 1
      return acc
    }, {} as Record<string, number>)
  }

  // Mark locally resolved errors
  const errorsWithResolved = errors.map(error => ({
    ...error,
    resolved: error.resolved || resolvedErrors.has(error.id)
  }))

  return (
    <div className="min-h-screen bg-gray-50">
      <Header />
      
      <QASessionLayout
        sessionInfo={{
          fileName: 'sample-translation-project.xliff',
          status: 'completed',
          mqmScore: 23.5,
          errorCount: errorStats.total
        }}
        className="h-screen"
      >
        <div className="p-6 space-y-6">
          {/* Page Header */}
          <div className="flex flex-col lg:flex-row justify-between items-start lg:items-center gap-4">
            <div>
              <h1 className="text-2xl font-bold text-gray-900">QA Error Analysis</h1>
              <p className="text-gray-600">
                Review and provide feedback on detected quality issues
              </p>
            </div>
            
            <div className="flex items-center gap-3">
              <Button variant="outline" size="sm">
                <Filter className="h-4 w-4 mr-2" />
                Advanced Filters
              </Button>
              <Button variant="outline" size="sm">
                <Download className="h-4 w-4 mr-2" />
                Export Report
              </Button>
              <Button size="sm">
                <RefreshCw className="h-4 w-4 mr-2" />
                Refresh
              </Button>
            </div>
          </div>

          {/* Error Statistics Cards */}
          <div className="grid grid-cols-1 md:grid-cols-4 gap-4">
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Total Errors</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold">{errorStats.total}</div>
                <p className="text-xs text-muted-foreground">
                  Across all segments
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Resolved</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-green-600">{errorStats.resolved}</div>
                <p className="text-xs text-muted-foreground">
                  {Math.round((errorStats.resolved / errorStats.total) * 100)}% completion
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Critical Issues</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-red-600">
                  {errorStats.bySeverity.critical || 0}
                </div>
                <p className="text-xs text-muted-foreground">
                  Require immediate attention
                </p>
              </CardContent>
            </Card>
            
            <Card>
              <CardHeader className="pb-2">
                <CardTitle className="text-sm font-medium">Feedback Rate</CardTitle>
              </CardHeader>
              <CardContent>
                <div className="text-2xl font-bold text-blue-600">73%</div>
                <p className="text-xs text-muted-foreground">
                  Errors with user feedback
                </p>
              </CardContent>
            </Card>
          </div>

          {/* Severity Distribution */}
          <Card>
            <CardHeader>
              <CardTitle>Error Distribution by Severity</CardTitle>
              <CardDescription>
                Overview of error types and their priority levels
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="flex gap-4">
                {Object.entries(errorStats.bySeverity).map(([severity, count]) => (
                  <div key={severity} className="flex items-center gap-2">
                    <Badge 
                      variant={
                        severity === 'critical' ? 'destructive' :
                        severity === 'major' ? 'secondary' :
                        severity === 'minor' ? 'outline' : 'default'
                      }
                    >
                      {severity}: {count}
                    </Badge>
                  </div>
                ))}
              </div>
            </CardContent>
          </Card>

          {/* Error List with Feedback Integration */}
          <Card>
            <CardHeader>
              <CardTitle>Error Details with Feedback</CardTitle>
              <CardDescription>
                Each error includes a feedback button for quality assessment and improvement suggestions
              </CardDescription>
            </CardHeader>
            <CardContent>
              <ErrorList
                errors={errorsWithResolved}
                onErrorClick={handleErrorClick}
                onErrorResolve={handleErrorResolve}
                groupBy="severity"
                maxHeight="800px"
              />
            </CardContent>
          </Card>
        </div>
      </QASessionLayout>
    </div>
  )
}

export default QAErrors 