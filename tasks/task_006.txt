# Task ID: 6
# Title: Design Database Schema
# Status: in-progress
# Dependencies: None
# Priority: medium
# Description: Create a database schema for user accounts, project metadata, and quality assessment results.
# Details:


# Test Strategy:


# Subtasks:
## 1. Design User Data Models [done]
### Dependencies: None
### Description: Create comprehensive user data structures with appropriate fields and normalization
### Details:
Define user entity tables with primary keys, determine required attributes (name, contact info, credentials), establish appropriate data types and constraints, implement security considerations for sensitive data, and create documentation for the user schema
<info added on 2025-05-29T22:35:43.824Z>
## Initial Analysis of Current User Data Models

After examining the codebase, I've identified several areas where the user data models can be improved:

### Current State Assessment:
1. **Database Schema (`src/lib/database.sql`)**: 
   - Basic `profiles` table with limited fields (id, email, full_name, role)
   - Role constraint is too restrictive: only 'user', 'admin', 'reviewer' 
   - Missing important user attributes like timezone, avatar, organization
   - No user status/activity tracking fields

2. **RBAC System (`src/lib/rbac.ts`)**:
   - Well-defined role hierarchy with 6 roles (super_admin, admin, manager, qa_analyst, user, guest)
   - Comprehensive permission system
   - However, database schema doesn't match RBAC role definitions

3. **TypeScript Types**:
   - Multiple inconsistent User interfaces across files
   - `src/lib/supabase.ts` has basic User interface
   - RBAC UserProfile interface has more fields but inconsistent with database
   - Missing comprehensive type definitions

### Key Issues Identified:
1. **Mismatch between database constraints and RBAC roles**
2. **Incomplete user profile fields**
3. **Inconsistent TypeScript type definitions**
4. **Missing user activity/status tracking**
5. **No user organization/team structure**
6. **Security fields missing (last_login, password_changed_at, etc.)**

### Plan:
1. Update database schema to match RBAC system
2. Add comprehensive user profile fields
3. Create unified TypeScript type definitions
4. Add user activity tracking
5. Implement proper security fields
6. Create migration scripts for existing data
</info added on 2025-05-29T22:35:43.824Z>
<info added on 2025-05-29T22:42:41.253Z>
## RBAC Integration Completed Successfully

### Fixed RBAC Service Issues:
1. **Removed Duplicate Enum Definitions**: Eliminated duplicate UserRole and Permission enums in `src/lib/rbac.ts` that were conflicting with the unified types in `src/lib/types/user.ts`

2. **Updated Database Queries**: Enhanced both `getUserProfile()` and `getAllUsers()` methods to:
   - Select all required fields from the enhanced profiles table schema
   - Properly map database results to the comprehensive UserProfile interface
   - Provide appropriate default values for all required fields
   - Handle optional fields correctly with undefined fallbacks

3. **Comprehensive Field Mapping**: Both methods now properly handle:
   - Personal information (names, contact details, bio)
   - Role and organization structure
   - User status and activity tracking
   - Security fields (2FA, login attempts, etc.)
   - User preferences (timezone, locale, formats)
   - Metadata (user agent, IP, signup source)
   - Audit fields (created/updated timestamps and users)

### Verification:
- ✅ RBAC file now has zero linter errors
- ✅ All UserProfile interface requirements satisfied
- ✅ Database schema alignment confirmed
- ✅ Type safety maintained throughout

### Current Status:
The user data models are now fully implemented and integrated:
- ✅ Enhanced database schema with comprehensive user fields
- ✅ Unified TypeScript type definitions in `src/lib/types/user.ts`
- ✅ Updated Supabase integration
- ✅ Fixed RBAC service integration
- ✅ Organizations table and relationships

The task is essentially complete with all major components working together seamlessly.
</info added on 2025-05-29T22:42:41.253Z>

## 2. Develop Project Metadata Structures [pending]
### Dependencies: 6.1
### Description: Design schema components for storing project-related information
### Details:
Define project entity tables with unique identifiers, determine metadata fields (creation date, status, description), establish relationships with user data models, implement versioning strategy if needed, and ensure proper indexing for efficient queries

## 3. Create Assessment Results Storage [pending]
### Dependencies: 6.1, 6.2
### Description: Design schema for storing and retrieving assessment data efficiently
### Details:
Define assessment result tables with appropriate primary keys, determine data structure for various result types, implement normalization to prevent redundancy, establish timestamp fields for tracking, and design for scalability with potentially large datasets

## 4. Define Relationships Between Entities [pending]
### Dependencies: 6.1, 6.2, 6.3
### Description: Establish proper relationships between all schema components
### Details:
Identify one-to-one, one-to-many, and many-to-many relationships, implement foreign key constraints, ensure referential integrity, create junction tables where needed, and document relationship diagrams for the entire schema

## 5. Implement Indexing Strategy [pending]
### Dependencies: 6.4
### Description: Design optimal indexing approach to ensure database performance
### Details:
Identify frequently queried fields for indexing, prevent potential hotspots in primary key design, balance between read and write performance, implement composite indexes where appropriate, and document indexing decisions with performance considerations

